{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","web3","airdrop","useState","account","setAccount","dispAccount","setDispAccount","airdropBalance","setAirdropBalance","init","a","detectEthereumProvider","provider","Web3","eth","Contract","abi","request","method","then","accounts","acc","console","log","substring","length","methods","getBalance","call","balance","catch","err","error","$","className","href","type","role","utils","fromWei","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gpGAAe,I,2ECuHAA,MA5Gf,WACE,IAGIC,EAAMC,EAHV,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAAS,WAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4CJ,mBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAsDMC,EAAI,uCAAG,4BAAAC,EAAA,sEACYC,MADZ,OACLC,EADK,OAEXZ,EAAO,IAAIa,IAAKD,GAChBX,EAAU,IAAID,EAAKc,IAAIC,SAASC,EAAI,8CAChCJ,GACFA,EACGK,QAAQ,CAAEC,OAAQ,iBAClBC,MAAK,SAACC,GACL,IAAIC,EAAMD,EAAS,GACnBE,QAAQC,IAAIF,GACRA,IACFjB,EAAWiB,GACXf,EAAee,EAAIG,UAAU,EAAG,GAAK,MAAQH,EAAIG,UAAUH,EAAII,OAAO,EAAGJ,EAAII,SAC7ExB,EAAQyB,QAAQC,aAAaC,OAC5BT,MAAK,SAACU,GACLrB,EAAkBqB,UAMvBC,OAAM,SAACC,GACNT,QAAQU,MAAMD,MAtBT,2CAAH,qDAiCV,OAJAE,KAAE,WACAxB,OAIA,sBAAKyB,UAAU,MAAf,UACE,qBAAKA,UAAU,mDAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,yBACA,wBAAQC,KAAK,SACXF,UAAW/B,EAAU,kBAAoB,kBAD3C,SAC+DE,SAGnE,qBAAK6B,UAAS,mBAAgB/B,EAAU,sBAAwB,oBAAuBkC,KAAK,QAA5F,SACIlC,EAAU,0BAA4B,8BAE1C,sBAAK+B,UAAU,mBAAmBG,KAAK,QAAvC,yCAC8B,uBAAM9B,EAAiBM,IAAKyB,MAAMC,QAAQhC,GAAkB,UAAW,WCtG5FiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4398af57.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport $ from 'jquery';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3 from 'web3';\nimport abi from './Airdrop.json';\n\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const [dispAccount, setDispAccount] = useState('Connect');\n  const [airdropBalance, setAirdropBalance] = useState(0);\n  let web3, airdrop;\n  const walletConnect = async() => {\n    console.log('Checking wallet connect...');\n\n    // Create a connector\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\", // Required\n      qrcodeModal: QRCodeModal,\n    });\n\n    // Check if connection is already established\n    if (!connector.connected) {\n      // create new session\n      connector.createSession();\n    }\n\n    // Subscribe to connection events\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        //throw error;\n        console.log('No MetaMask or WalletConnect found.');\n        const element = 'Please install MetaMask.';\n        return;\n      }\n\n      // Get provided accounts and chainId\n      const { accounts, chainId } = payload.params[0];\n\n      if (accounts) {\n        let acc = accounts[0];\n        setAccount(acc);\n        setDispAccount(acc.substring(0, 5) + '...' + acc.substring(acc.length-3, acc.length));\n      }\n    });\n\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      // Get updated accounts and chainId\n      const { accounts, chainId } = payload.params[0];\n    });\n\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      // Delete connector\n    });\n  };\n\n  const init = async () => {\n    const provider = await detectEthereumProvider();\n    web3 = new Web3(provider);\n    airdrop = new web3.eth.Contract(abi,'0xc1c412260c017c7da3dD3499e562447553f0a9b2');\n    if (provider) {\n      provider\n        .request({ method: 'eth_accounts' })\n        .then((accounts) => {\n          let acc = accounts[0];\n          console.log(acc);\n          if (acc) {\n            setAccount(acc);\n            setDispAccount(acc.substring(0, 5) + '...' + acc.substring(acc.length-3, acc.length));\n            airdrop.methods.getBalance().call()\n            .then((balance) => {\n              setAirdropBalance(balance);\n            })\n          } else {\n            //walletConnect();\n          }\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    } else {\n      //walletConnect();\n    }\n  };\n\n  $(function() {\n    init();\n  });\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"#\">HOTPOT COIN</a>\n          <button type=\"button\"\n            className={account ? 'btn btn-success' : 'btn btn-warning'}>{dispAccount}</button>\n        </div>\n      </nav>\n      <div className={ `alert' + ${ account ? 'alert alert-success' : 'alert alert-info' }`} role=\"alert\">\n        { account ? 'Connection established.' : 'Waiting for connection...' }\n      </div>\n      <div className=\"alert alert-info\" role=\"alert\">\n        Remaining airdrop balance is<br/>{airdropBalance ? Web3.utils.fromWei(airdropBalance) + ' HOTPOT': '?'}\n      </div>\n    </div>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}