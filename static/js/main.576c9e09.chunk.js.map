{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","web3","token","airdrop","useState","account","setAccount","dispAccount","setDispAccount","airdropBalance","setAirdropBalance","walletBalance","setWalletBalance","init","a","detectEthereumProvider","provider","Web3","eth","Contract","hotpotAbi","airdropAbi","request","method","then","accounts","acc","substring","length","methods","getBalance","call","balance","ReactDOM","render","className","role","utils","fromWei","replace","document","getElementById","getAmountHeldByAccount","checkIsClaimedBy","renderConnectionInfo","catch","err","console","error","balanceOf","isClaimedBy","claimed","type","disabled","onClick","claim","renderClaimButton","send","from","result","alert","$","href","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.576c9e09.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport $ from 'jquery';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3 from 'web3';\nimport hotpotAbi from './Hotpot.json';\nimport airdropAbi from './Airdrop.json';\n\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const [dispAccount, setDispAccount] = useState('Connect');\n  const [airdropBalance, setAirdropBalance] = useState(0);\n  const [walletBalance, setWalletBalance] = useState('0');\n  let web3, token, airdrop;\n  const walletConnect = async() => {\n    console.log('Checking wallet connect...');\n\n    // Create a connector\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\", // Required\n      qrcodeModal: QRCodeModal,\n    });\n\n    // Check if connection is already established\n    if (!connector.connected) {\n      // create new session\n      connector.createSession();\n    }\n\n    // Subscribe to connection events\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        //throw error;\n        console.log('No MetaMask or WalletConnect found.');\n        const element = 'Please install MetaMask.';\n        return;\n      }\n\n      // Get provided accounts and chainId\n      const { accounts, chainId } = payload.params[0];\n\n      if (accounts) {\n        let acc = accounts[0];\n        setAccount(acc);\n        setDispAccount(acc.substring(0, 5) + '...' + acc.substring(acc.length-3, acc.length));\n      }\n    });\n\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      // Get updated accounts and chainId\n      const { accounts, chainId } = payload.params[0];\n    });\n\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      // Delete connector\n    });\n  };\n\n  const init = async () => {\n    const provider = await detectEthereumProvider();\n    if (provider) {\n      web3 = new Web3(provider);\n      // token = new web3.eth.Contract(hotpotAbi,'0xD67b8B287aBDcb1F65b1477B5Fb3723a79710cE5');\n      // airdrop = new web3.eth.Contract(airdropAbi,'0x74e039AD6AF2D375874e45Ac9E09840227b600d2');\n      // test\n      token = new web3.eth.Contract(hotpotAbi,'0x720f546e672c6B612aF334220d748478eD98361E');\n      airdrop = new web3.eth.Contract(airdropAbi,'0xC995c46E77a7e4FB7622E10521E23b06d2dF2058');\n      // Get account 0\n      provider\n        .request({ method: 'eth_accounts' })\n        .then((accounts) => {\n          let acc = accounts[0];\n          if (acc) {\n            setAccount(acc);\n            setDispAccount(acc.substring(0, 5) + '...' + acc.substring(acc.length-3, acc.length));\n            // Get airdop balance\n            airdrop.methods.getBalance().call()\n            .then((balance) => {\n              setAirdropBalance(balance);\n              renderAirdropInfo();\n            });\n            getAmountHeldByAccount(acc);\n            checkIsClaimedBy(acc);\n          } else {\n            //walletConnect();\n          }\n          renderConnectionInfo();\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    } else {\n      renderConnectionInfo();\n    }\n  };\n\n  $(function() {\n    init();\n  });\n\n  function getAmountHeldByAccount(account) {\n    // Get amount held by account\n    token.methods.balanceOf(account).call()\n    .then((balance) => {\n      setWalletBalance(balance);\n      renderWalletBalance();\n    });\n  }\n\n  function checkIsClaimedBy(account) {\n    // Check if address has received airdrop\n    airdrop.methods.isClaimedBy(account).call()\n    .then((claimed) => {\n      renderClaimButton(claimed);\n    })\n  }\n\n  function renderConnectionInfo() {\n    ReactDOM.render(\n      <div className={ `alert' + ${ account ? 'alert alert-success' : 'alert alert-secondary' }`} role=\"alert\">\n        { account ? 'Connection established.' : 'No connection established.' }\n      </div>,\n      document.getElementById('connection-info')\n    );\n  }\n\n  function renderAirdropInfo() {\n    ReactDOM.render(\n      <div className=\"alert alert-info\" role=\"alert\">\n        Remaining airdrop balance is<br/>{airdropBalance ? Web3.utils.fromWei(airdropBalance).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + ' HOTPOT.': '...'}\n      </div>,\n      document.getElementById('airdrop-info')\n    );\n  }\n\n  function renderWalletBalance() {\n    ReactDOM.render(\n      <div className=\"alert alert-info\" role=\"alert\">\n        Your wallet currently holds<br/>{Web3.utils.fromWei(walletBalance).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + ' HOTPOT.'}\n      </div>,\n      document.getElementById('wallet-info')\n    );\n  }\n\n  function renderClaimButton(claimed) {\n    ReactDOM.render(\n      <div className=\"d-grid gap-2\">\n        <button type=\"button\" className={'btn btn-lg ' + (claimed ? 'btn-secondary' : 'btn-primary') } disabled={claimed} onClick={claim}>\n          {claimed ? 'Address has claimed airdrop.' : 'Claim 1,000,000 HOTPOT'}\n        </button>\n        <p><small>*Airdrop can only be claimed once per address.</small></p>\n      </div>,\n      document.getElementById('claim-info')\n    );\n  }\n\n  function claim() {\n    airdrop.methods.claim().send({from: account})\n    .then(function (result) {\n      alert('Airdrop claimed successfully.');\n      getAmountHeldByAccount(account);\n      checkIsClaimedBy(account);\n    }, function (error) {\n      alert('Airdrop claim failed. Please check your transaction history.');\n      getAmountHeldByAccount(account);\n      checkIsClaimedBy(account);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"#\">HOTPOT COIN</a>\n          <button type=\"button\"\n            className={account ? 'btn btn-success' : 'btn btn-warning'}>{dispAccount}</button>\n        </div>\n      </nav>\n      <div id='connection-info'>\n        <div className=\"alert alert-secondary\" role=\"alert\">\n          Trying to establish connection...\n        </div>\n      </div>\n      <div id='airdrop-info'/>\n      <div id='wallet-info'/>\n      <div id='claim-info'/>\n    </div>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}